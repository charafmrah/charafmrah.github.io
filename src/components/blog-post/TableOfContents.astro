---
---

<nav id="toc" class="fixed top-36 left-6 hidden w-72 px-4 leading-8 lg:inline">
  <svg
    class="toc-marker"
    width="200"
    height="200"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      stroke="#fb923c"
      stroke-width="3"
      fill="transparent"
      stroke-dasharray="0, 0, 0, 1000"
      stroke-linecap="round"
      stroke-linejoin="round"
      transform="translate(-0.5, -0.5)"></path>
  </svg>
</nav>

<script is:inline>
  /* 
 ---Table of Contents Js ------
*/
  window.addEventListener("DOMContentLoaded", (event) => {
    const article = document.getElementById("single-article");
    const headings = article.querySelectorAll("h2, h3");
    const toc = document.getElementById("toc");
    const totalHeadings = headings.length;
    let tocOl = document.createElement("ul");
    let tocFragment = new DocumentFragment();
    let mainLi = null;
    let subUl = null;
    let subLi = null;
    let isSibling = false;

    if (totalHeadings > 1) {
      for (let element of headings) {
        let anchor = document.createElement("a");
        let anchorText = element.innerText;
        anchor.innerText = anchorText;
        let elementId = anchorText.replaceAll(" ", "-").toLowerCase();
        anchor.href = "#" + elementId;
        element.id = elementId;
        let level = element.nodeName;

        if ("H3" === level) {
          if (mainLi) {
            subLi = document.createElement("li");
            subLi.appendChild(anchor);

            if (isSibling === false) {
              subUl = document.createElement("ul");
            }
            subUl.appendChild(subLi);
            mainLi.appendChild(subUl);

            isSibling = true;
          }
        } else {
          mainLi = document.createElement("li");
          mainLi.appendChild(anchor);
          tocFragment.appendChild(mainLi);
          isSibling = false;
          subUl = null;
        }
      }
      tocOl.append(tocFragment);
      toc.append(tocOl);
      window.addEventListener("resize", drawPath, false);
      document
        .getElementById("page-wrapper")
        .addEventListener("scroll", sync, false);
      drawPath();
    } else {
      toc.style.display = "none";
    }
  });

  /* Draw the path */
  let tocPath = document.querySelector(".toc-marker path");
  let tocItems;

  // Factor of screen size that the element must cross
  // before it's considered visible
  let TOP_MARGIN = 0.1,
    BOTTOM_MARGIN = 0.2;

  let pathLength;

  let lastPathStart, lastPathEnd;

  function drawPath() {
    tocItems = [].slice.call(toc.querySelectorAll("li"));

    // Cache element references and measurements
    tocItems = tocItems.map(function (item) {
      let anchor = item.querySelector("a");
      let target = document.getElementById(
        anchor.getAttribute("href").slice(1)
      );

      return {
        listItem: item,
        anchor: anchor,
        target: target,
      };
    });

    // Remove missing targets
    tocItems = tocItems.filter(function (item) {
      return !!item.target;
    });

    let path = [];
    let pathIndent;

    tocItems.forEach(function (item, i) {
      let x = item.anchor.offsetLeft - 5,
        y = item.anchor.offsetTop,
        height = item.anchor.offsetHeight;

      if (i === 0) {
        path.push("M", x, y, "L", x, y + height);
        item.pathStart = 0;
      } else {
        // Draw an additional line when there's a change in
        // indent levels
        if (pathIndent !== x) path.push("L", pathIndent, y);

        path.push("L", x, y);

        // Set the current path so that we can measure it
        tocPath.setAttribute("d", path.join(" "));
        item.pathStart = tocPath.getTotalLength() || 0;

        path.push("L", x, y + height);
      }

      pathIndent = x;

      tocPath.setAttribute("d", path.join(" "));
      item.pathEnd = tocPath.getTotalLength();
    });

    pathLength = tocPath.getTotalLength();

    sync();
  }

  function sync() {
    let windowHeight = window.innerHeight;

    let pathStart = pathLength,
      pathEnd = 0;

    let visibleItems = 0;

    tocItems.forEach(function (item) {
      let targetBounds = item.target.getBoundingClientRect();

      if (
        targetBounds.bottom > windowHeight * TOP_MARGIN &&
        targetBounds.top < windowHeight * (1 - BOTTOM_MARGIN)
      ) {
        pathStart = Math.min(item.pathStart, pathStart);
        pathEnd = Math.max(item.pathEnd, pathEnd);

        visibleItems += 1;

        item.listItem.classList.add("visible");
      } else {
        item.listItem.classList.remove("visible");
      }
    });

    // Specify the visible path or hide the path altogether
    // if there are no visible items
    if (visibleItems > 0 && pathStart < pathEnd) {
      if (pathStart !== lastPathStart || pathEnd !== lastPathEnd) {
        tocPath.setAttribute("stroke-dashoffset", "1");
        tocPath.setAttribute(
          "stroke-dasharray",
          "1, " + pathStart + ", " + (pathEnd - pathStart) + ", " + pathLength
        );
        tocPath.setAttribute("opacity", 1);
      }
    } else {
      tocPath.setAttribute("opacity", 0);
    }

    lastPathStart = pathStart;
    lastPathEnd = pathEnd;
  }
</script>

<style is:inline>
  #toc ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  #toc ul ul {
    padding-left: 2em;
  }
  #toc li a {
    display: inline-block;
    color: #aaa;
    text-decoration: none;
    transition: all 0.3s cubic-bezier(0.23, 1, 0.32, 1);
  }
  #toc li.visible > a {
    color: #111;
    transform: translate(5px);
  }
  .toc-marker {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
  .toc-marker path {
    transition: all 0.3s ease;
  }
</style>
